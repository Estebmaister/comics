// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query_mysql.sql

package mysql

import (
	"context"
	"database/sql"
	"time"
)

const deleteGenresByComicID = `-- name: DeleteGenresByComicID :exec
DELETE FROM comic_genres      WHERE comic_id = ?
`

func (q *Queries) DeleteGenresByComicID(ctx context.Context, comicID int32) error {
	_, err := q.db.ExecContext(ctx, deleteGenresByComicID, comicID)
	return err
}

const deletePublishersByComicID = `-- name: DeletePublishersByComicID :exec
DELETE FROM comic_publishers  WHERE comic_id = ?
`

func (q *Queries) DeletePublishersByComicID(ctx context.Context, comicID int32) error {
	_, err := q.db.ExecContext(ctx, deletePublishersByComicID, comicID)
	return err
}

const deleteTitlesByComicID = `-- name: DeleteTitlesByComicID :exec
DELETE FROM comic_titles      WHERE comic_id = ?
`

func (q *Queries) DeleteTitlesByComicID(ctx context.Context, comicID int32) error {
	_, err := q.db.ExecContext(ctx, deleteTitlesByComicID, comicID)
	return err
}

const getComicById = `-- name: GetComicById :one
SELECT c.id, c.author, c.description, c.cover, c.com_type, c.status, c.current_chap, c.viewed_chap, c.last_update, c.track, c.deleted, 
  GROUP_CONCAT(ct.title ORDER BY ct.title) AS titles,
  GROUP_CONCAT(cp.publisher ORDER BY cp.publisher) AS published_in,
  GROUP_CONCAT(cg.genre ORDER BY cg.genre) AS genres
FROM comics c
  JOIN comic_titles ct ON c.id = ct.comic_id
  JOIN comic_genres cg ON c.id = cg.comic_id
  JOIN comic_publishers cp ON c.id = cp.comic_id
WHERE c.id = ?
GROUP BY c.id LIMIT 1
`

type GetComicByIdRow struct {
	ID          int32
	Author      sql.NullString
	Description sql.NullString
	Cover       sql.NullString
	ComType     int32
	Status      int32
	CurrentChap int32
	ViewedChap  int32
	LastUpdate  time.Time
	Track       bool
	Deleted     bool
	Titles      sql.NullString
	PublishedIn sql.NullString
	Genres      sql.NullString
}

func (q *Queries) GetComicById(ctx context.Context, id int32) (GetComicByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getComicById, id)
	var i GetComicByIdRow
	err := row.Scan(
		&i.ID,
		&i.Author,
		&i.Description,
		&i.Cover,
		&i.ComType,
		&i.Status,
		&i.CurrentChap,
		&i.ViewedChap,
		&i.LastUpdate,
		&i.Track,
		&i.Deleted,
		&i.Titles,
		&i.PublishedIn,
		&i.Genres,
	)
	return i, err
}

const getComics = `-- name: GetComics :many
SELECT c.id, c.author, c.description, c.cover, c.com_type, c.status, c.current_chap, c.viewed_chap, c.last_update, c.track, c.deleted, 
  GROUP_CONCAT(ct.title ORDER BY ct.title) AS titles,
  GROUP_CONCAT(cp.publisher ORDER BY cp.publisher) AS published_in,
  GROUP_CONCAT(cg.genre ORDER BY cg.genre) AS genres
FROM comics c
  JOIN comic_titles ct ON c.id = ct.comic_id
  JOIN comic_genres cg ON c.id = cg.comic_id
  JOIN comic_publishers cp ON c.id = cp.comic_id
GROUP BY c.id
ORDER BY c.last_update DESC
LIMIT ? OFFSET ?
`

type GetComicsParams struct {
	Limit  int32
	Offset int32
}

type GetComicsRow struct {
	ID          int32
	Author      sql.NullString
	Description sql.NullString
	Cover       sql.NullString
	ComType     int32
	Status      int32
	CurrentChap int32
	ViewedChap  int32
	LastUpdate  time.Time
	Track       bool
	Deleted     bool
	Titles      sql.NullString
	PublishedIn sql.NullString
	Genres      sql.NullString
}

func (q *Queries) GetComics(ctx context.Context, arg GetComicsParams) ([]GetComicsRow, error) {
	rows, err := q.db.QueryContext(ctx, getComics, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetComicsRow
	for rows.Next() {
		var i GetComicsRow
		if err := rows.Scan(
			&i.ID,
			&i.Author,
			&i.Description,
			&i.Cover,
			&i.ComType,
			&i.Status,
			&i.CurrentChap,
			&i.ViewedChap,
			&i.LastUpdate,
			&i.Track,
			&i.Deleted,
			&i.Titles,
			&i.PublishedIn,
			&i.Genres,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getComicsByTitle = `-- name: GetComicsByTitle :many
SELECT c.id, c.author, c.description, c.cover, c.com_type, c.status, c.current_chap, c.viewed_chap, c.last_update, c.track, c.deleted, 
  GROUP_CONCAT(ct.title ORDER BY ct.title) AS titles,
  GROUP_CONCAT(cp.publisher ORDER BY cp.publisher) AS published_in,
  GROUP_CONCAT(cg.genre ORDER BY cg.genre) AS genres
FROM comics c
  JOIN comic_titles ct ON c.id = ct.comic_id
  JOIN comic_genres cg ON c.id = cg.comic_id
  JOIN comic_publishers cp ON c.id = cp.comic_id
WHERE ct.title LIKE CONCAT('%', ?, '%')
GROUP BY c.id
ORDER BY c.last_update DESC
LIMIT ? OFFSET ?
`

type GetComicsByTitleParams struct {
	CONCAT interface{}
	Limit  int32
	Offset int32
}

type GetComicsByTitleRow struct {
	ID          int32
	Author      sql.NullString
	Description sql.NullString
	Cover       sql.NullString
	ComType     int32
	Status      int32
	CurrentChap int32
	ViewedChap  int32
	LastUpdate  time.Time
	Track       bool
	Deleted     bool
	Titles      sql.NullString
	PublishedIn sql.NullString
	Genres      sql.NullString
}

// Find comics with titles matching a substring
func (q *Queries) GetComicsByTitle(ctx context.Context, arg GetComicsByTitleParams) ([]GetComicsByTitleRow, error) {
	rows, err := q.db.QueryContext(ctx, getComicsByTitle, arg.CONCAT, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetComicsByTitleRow
	for rows.Next() {
		var i GetComicsByTitleRow
		if err := rows.Scan(
			&i.ID,
			&i.Author,
			&i.Description,
			&i.Cover,
			&i.ComType,
			&i.Status,
			&i.CurrentChap,
			&i.ViewedChap,
			&i.LastUpdate,
			&i.Track,
			&i.Deleted,
			&i.Titles,
			&i.PublishedIn,
			&i.Genres,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLastInsertID = `-- name: GetLastInsertID :one
SELECT LAST_INSERT_ID() AS id
`

func (q *Queries) GetLastInsertID(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getLastInsertID)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const hardDeleteComicById = `-- name: HardDeleteComicById :exec
DELETE FROM comics            WHERE id = ?
`

// DeleteComic start
func (q *Queries) HardDeleteComicById(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, hardDeleteComicById, id)
	return err
}

const insertComic = `-- name: InsertComic :exec
INSERT INTO comics (
  author, description, cover, com_type, status, current_chap, 
  viewed_chap, last_update, track, deleted )
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type InsertComicParams struct {
	Author      sql.NullString
	Description sql.NullString
	Cover       sql.NullString
	ComType     int32
	Status      int32
	CurrentChap int32
	ViewedChap  int32
	LastUpdate  time.Time
	Track       bool
	Deleted     bool
}

// CreateComic start
func (q *Queries) InsertComic(ctx context.Context, arg InsertComicParams) error {
	_, err := q.db.ExecContext(ctx, insertComic,
		arg.Author,
		arg.Description,
		arg.Cover,
		arg.ComType,
		arg.Status,
		arg.CurrentChap,
		arg.ViewedChap,
		arg.LastUpdate,
		arg.Track,
		arg.Deleted,
	)
	return err
}

const insertGenre = `-- name: InsertGenre :exec
INSERT INTO comic_genres (comic_id, genre) VALUES (?, ?)
`

type InsertGenreParams struct {
	ComicID int32
	Genre   int32
}

func (q *Queries) InsertGenre(ctx context.Context, arg InsertGenreParams) error {
	_, err := q.db.ExecContext(ctx, insertGenre, arg.ComicID, arg.Genre)
	return err
}

const insertPublisher = `-- name: InsertPublisher :exec
INSERT INTO comic_publishers (comic_id, publisher) VALUES (?, ?)
`

type InsertPublisherParams struct {
	ComicID   int32
	Publisher int32
}

func (q *Queries) InsertPublisher(ctx context.Context, arg InsertPublisherParams) error {
	_, err := q.db.ExecContext(ctx, insertPublisher, arg.ComicID, arg.Publisher)
	return err
}

const insertTitle = `-- name: InsertTitle :exec
INSERT INTO comic_titles (comic_id, title) VALUES (?, ?)
`

type InsertTitleParams struct {
	ComicID int32
	Title   string
}

func (q *Queries) InsertTitle(ctx context.Context, arg InsertTitleParams) error {
	_, err := q.db.ExecContext(ctx, insertTitle, arg.ComicID, arg.Title)
	return err
}

const softDeleteComicById = `-- name: SoftDeleteComicById :exec


UPDATE comics SET deleted = true WHERE id = ?
`

// delete and re-insert all title, publisher, genre if needed, UpdateComic end
func (q *Queries) SoftDeleteComicById(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, softDeleteComicById, id)
	return err
}

const updateComicById = `-- name: UpdateComicById :exec


UPDATE comics 
  set author = ?,
  description = ?,
  cover = ?,
  com_type = ?,
  status = ?,
  current_chap = ?,
  viewed_chap = ?,
  last_update = ?,
  track = ?,
  deleted = ?
WHERE id = ?
`

type UpdateComicByIdParams struct {
	Author      sql.NullString
	Description sql.NullString
	Cover       sql.NullString
	ComType     int32
	Status      int32
	CurrentChap int32
	ViewedChap  int32
	LastUpdate  time.Time
	Track       bool
	Deleted     bool
	ID          int32
}

// CreateComic end
// UpdateComic start
func (q *Queries) UpdateComicById(ctx context.Context, arg UpdateComicByIdParams) error {
	_, err := q.db.ExecContext(ctx, updateComicById,
		arg.Author,
		arg.Description,
		arg.Cover,
		arg.ComType,
		arg.Status,
		arg.CurrentChap,
		arg.ViewedChap,
		arg.LastUpdate,
		arg.Track,
		arg.Deleted,
		arg.ID,
	)
	return err
}
