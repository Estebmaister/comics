// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.29.3
// source: comics_service.proto

package pb

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Sort order for comic listings
type ComicSortOrder int32

const (
	ComicSortOrder_UNSPECIFIED  ComicSortOrder = 0
	ComicSortOrder_TITLE_ASC    ComicSortOrder = 1
	ComicSortOrder_TITLE_DESC   ComicSortOrder = 2
	ComicSortOrder_UPDATED_ASC  ComicSortOrder = 3
	ComicSortOrder_UPDATED_DESC ComicSortOrder = 4
	ComicSortOrder_RELEVANCE    ComicSortOrder = 5 // Only valid for search results
)

// Enum value maps for ComicSortOrder.
var (
	ComicSortOrder_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "TITLE_ASC",
		2: "TITLE_DESC",
		3: "UPDATED_ASC",
		4: "UPDATED_DESC",
		5: "RELEVANCE",
	}
	ComicSortOrder_value = map[string]int32{
		"UNSPECIFIED":  0,
		"TITLE_ASC":    1,
		"TITLE_DESC":   2,
		"UPDATED_ASC":  3,
		"UPDATED_DESC": 4,
		"RELEVANCE":    5,
	}
)

func (x ComicSortOrder) Enum() *ComicSortOrder {
	p := new(ComicSortOrder)
	*p = x
	return p
}

func (x ComicSortOrder) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ComicSortOrder) Descriptor() protoreflect.EnumDescriptor {
	return file_comics_service_proto_enumTypes[0].Descriptor()
}

func (ComicSortOrder) Type() protoreflect.EnumType {
	return &file_comics_service_proto_enumTypes[0]
}

func (x ComicSortOrder) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ComicSortOrder.Descriptor instead.
func (ComicSortOrder) EnumDescriptor() ([]byte, []int) {
	return file_comics_service_proto_rawDescGZIP(), []int{0}
}

// Request/Response messages
type ComicResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *ResponseMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Comic    *Comic            `protobuf:"bytes,2,opt,name=comic,proto3,oneof" json:"comic,omitempty"` // Null when comic is not found
	Error    *string           `protobuf:"bytes,3,opt,name=error,proto3,oneof" json:"error,omitempty"` // Error message when operation fails
}

func (x *ComicResponse) Reset() {
	*x = ComicResponse{}
	mi := &file_comics_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ComicResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComicResponse) ProtoMessage() {}

func (x *ComicResponse) ProtoReflect() protoreflect.Message {
	mi := &file_comics_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComicResponse.ProtoReflect.Descriptor instead.
func (*ComicResponse) Descriptor() ([]byte, []int) {
	return file_comics_service_proto_rawDescGZIP(), []int{0}
}

func (x *ComicResponse) GetMetadata() *ResponseMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ComicResponse) GetComic() *Comic {
	if x != nil {
		return x.Comic
	}
	return nil
}

func (x *ComicResponse) GetError() string {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return ""
}

type ComicsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata    *ResponseMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Comics      []*Comic          `protobuf:"bytes,2,rep,name=comics,proto3" json:"comics,omitempty"`
	TotalCount  *uint32           `protobuf:"varint,3,opt,name=total_count,json=totalCount,proto3,oneof" json:"total_count,omitempty"`
	TotalPages  *uint32           `protobuf:"varint,4,opt,name=total_pages,json=totalPages,proto3,oneof" json:"total_pages,omitempty"`
	CurrentPage *uint32           `protobuf:"varint,5,opt,name=current_page,json=currentPage,proto3,oneof" json:"current_page,omitempty"`
	Error       *string           `protobuf:"bytes,6,opt,name=error,proto3,oneof" json:"error,omitempty"` // Error message when operation fails
}

func (x *ComicsResponse) Reset() {
	*x = ComicsResponse{}
	mi := &file_comics_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ComicsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComicsResponse) ProtoMessage() {}

func (x *ComicsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_comics_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComicsResponse.ProtoReflect.Descriptor instead.
func (*ComicsResponse) Descriptor() ([]byte, []int) {
	return file_comics_service_proto_rawDescGZIP(), []int{1}
}

func (x *ComicsResponse) GetMetadata() *ResponseMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ComicsResponse) GetComics() []*Comic {
	if x != nil {
		return x.Comics
	}
	return nil
}

func (x *ComicsResponse) GetTotalCount() uint32 {
	if x != nil && x.TotalCount != nil {
		return *x.TotalCount
	}
	return 0
}

func (x *ComicsResponse) GetTotalPages() uint32 {
	if x != nil && x.TotalPages != nil {
		return *x.TotalPages
	}
	return 0
}

func (x *ComicsResponse) GetCurrentPage() uint32 {
	if x != nil && x.CurrentPage != nil {
		return *x.CurrentPage
	}
	return 0
}

func (x *ComicsResponse) GetError() string {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return ""
}

type GetComicByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *RequestMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Id       uint32           `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"` // Comic ID to retrieve
}

func (x *GetComicByIdRequest) Reset() {
	*x = GetComicByIdRequest{}
	mi := &file_comics_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetComicByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetComicByIdRequest) ProtoMessage() {}

func (x *GetComicByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_comics_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetComicByIdRequest.ProtoReflect.Descriptor instead.
func (*GetComicByIdRequest) Descriptor() ([]byte, []int) {
	return file_comics_service_proto_rawDescGZIP(), []int{2}
}

func (x *GetComicByIdRequest) GetMetadata() *RequestMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *GetComicByIdRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetComicByTitleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *RequestMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Title    string           `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"` // Non-empty title required
}

func (x *GetComicByTitleRequest) Reset() {
	*x = GetComicByTitleRequest{}
	mi := &file_comics_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetComicByTitleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetComicByTitleRequest) ProtoMessage() {}

func (x *GetComicByTitleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_comics_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetComicByTitleRequest.ProtoReflect.Descriptor instead.
func (*GetComicByTitleRequest) Descriptor() ([]byte, []int) {
	return file_comics_service_proto_rawDescGZIP(), []int{3}
}

func (x *GetComicByTitleRequest) GetMetadata() *RequestMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *GetComicByTitleRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

type DeleteComicRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *RequestMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Id       uint32           `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"` // Comic ID to delete
}

func (x *DeleteComicRequest) Reset() {
	*x = DeleteComicRequest{}
	mi := &file_comics_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteComicRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteComicRequest) ProtoMessage() {}

func (x *DeleteComicRequest) ProtoReflect() protoreflect.Message {
	mi := &file_comics_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteComicRequest.ProtoReflect.Descriptor instead.
func (*DeleteComicRequest) Descriptor() ([]byte, []int) {
	return file_comics_service_proto_rawDescGZIP(), []int{4}
}

func (x *DeleteComicRequest) GetMetadata() *RequestMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *DeleteComicRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type UpdateComicRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *RequestMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Id       uint32           `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`      // Comic ID to update
	Comic    *Comic           `protobuf:"bytes,3,opt,name=comic,proto3" json:"comic,omitempty"` // Fields to update
}

func (x *UpdateComicRequest) Reset() {
	*x = UpdateComicRequest{}
	mi := &file_comics_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateComicRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateComicRequest) ProtoMessage() {}

func (x *UpdateComicRequest) ProtoReflect() protoreflect.Message {
	mi := &file_comics_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateComicRequest.ProtoReflect.Descriptor instead.
func (*UpdateComicRequest) Descriptor() ([]byte, []int) {
	return file_comics_service_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateComicRequest) GetMetadata() *RequestMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *UpdateComicRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateComicRequest) GetComic() *Comic {
	if x != nil {
		return x.Comic
	}
	return nil
}

type CreateComicRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *RequestMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Comic    *Comic           `protobuf:"bytes,2,opt,name=comic,proto3" json:"comic,omitempty"` // Comic to create
}

func (x *CreateComicRequest) Reset() {
	*x = CreateComicRequest{}
	mi := &file_comics_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateComicRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateComicRequest) ProtoMessage() {}

func (x *CreateComicRequest) ProtoReflect() protoreflect.Message {
	mi := &file_comics_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateComicRequest.ProtoReflect.Descriptor instead.
func (*CreateComicRequest) Descriptor() ([]byte, []int) {
	return file_comics_service_proto_rawDescGZIP(), []int{6}
}

func (x *CreateComicRequest) GetMetadata() *RequestMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *CreateComicRequest) GetComic() *Comic {
	if x != nil {
		return x.Comic
	}
	return nil
}

// Pagination configuration
type PaginationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page     uint32 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize uint32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"` // Between 1 and 100
}

func (x *PaginationRequest) Reset() {
	*x = PaginationRequest{}
	mi := &file_comics_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PaginationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaginationRequest) ProtoMessage() {}

func (x *PaginationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_comics_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaginationRequest.ProtoReflect.Descriptor instead.
func (*PaginationRequest) Descriptor() ([]byte, []int) {
	return file_comics_service_proto_rawDescGZIP(), []int{7}
}

func (x *PaginationRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *PaginationRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type GetComicsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata      *RequestMetadata   `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Pagination    *PaginationRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	SortOrder     *ComicSortOrder    `protobuf:"varint,3,opt,name=sort_order,json=sortOrder,proto3,enum=comics.ComicSortOrder,oneof" json:"sort_order,omitempty"` // How to sort the results
	TrackedOnly   *bool              `protobuf:"varint,4,opt,name=tracked_only,json=trackedOnly,proto3,oneof" json:"tracked_only,omitempty"`                      // Filter to show only tracked comics
	UncheckedOnly *bool              `protobuf:"varint,5,opt,name=unchecked_only,json=uncheckedOnly,proto3,oneof" json:"unchecked_only,omitempty"`                // Filter to show only tracked and unchecked
}

func (x *GetComicsRequest) Reset() {
	*x = GetComicsRequest{}
	mi := &file_comics_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetComicsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetComicsRequest) ProtoMessage() {}

func (x *GetComicsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_comics_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetComicsRequest.ProtoReflect.Descriptor instead.
func (*GetComicsRequest) Descriptor() ([]byte, []int) {
	return file_comics_service_proto_rawDescGZIP(), []int{8}
}

func (x *GetComicsRequest) GetMetadata() *RequestMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *GetComicsRequest) GetPagination() *PaginationRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *GetComicsRequest) GetSortOrder() ComicSortOrder {
	if x != nil && x.SortOrder != nil {
		return *x.SortOrder
	}
	return ComicSortOrder_UNSPECIFIED
}

func (x *GetComicsRequest) GetTrackedOnly() bool {
	if x != nil && x.TrackedOnly != nil {
		return *x.TrackedOnly
	}
	return false
}

func (x *GetComicsRequest) GetUncheckedOnly() bool {
	if x != nil && x.UncheckedOnly != nil {
		return *x.UncheckedOnly
	}
	return false
}

type SearchComicsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata      *RequestMetadata   `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Query         string             `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"` // At least 2 chars for search
	Pagination    *PaginationRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
	SortOrder     *ComicSortOrder    `protobuf:"varint,4,opt,name=sort_order,json=sortOrder,proto3,enum=comics.ComicSortOrder,oneof" json:"sort_order,omitempty"` // How to sort the results
	TrackedOnly   *bool              `protobuf:"varint,5,opt,name=tracked_only,json=trackedOnly,proto3,oneof" json:"tracked_only,omitempty"`                      // Filter to only show tracked comics
	UncheckedOnly *bool              `protobuf:"varint,6,opt,name=unchecked_only,json=uncheckedOnly,proto3,oneof" json:"unchecked_only,omitempty"`                // Filter to only show tracked and unchecked
}

func (x *SearchComicsRequest) Reset() {
	*x = SearchComicsRequest{}
	mi := &file_comics_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchComicsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchComicsRequest) ProtoMessage() {}

func (x *SearchComicsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_comics_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchComicsRequest.ProtoReflect.Descriptor instead.
func (*SearchComicsRequest) Descriptor() ([]byte, []int) {
	return file_comics_service_proto_rawDescGZIP(), []int{9}
}

func (x *SearchComicsRequest) GetMetadata() *RequestMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *SearchComicsRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *SearchComicsRequest) GetPagination() *PaginationRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *SearchComicsRequest) GetSortOrder() ComicSortOrder {
	if x != nil && x.SortOrder != nil {
		return *x.SortOrder
	}
	return ComicSortOrder_UNSPECIFIED
}

func (x *SearchComicsRequest) GetTrackedOnly() bool {
	if x != nil && x.TrackedOnly != nil {
		return *x.TrackedOnly
	}
	return false
}

func (x *SearchComicsRequest) GetUncheckedOnly() bool {
	if x != nil && x.UncheckedOnly != nil {
		return *x.UncheckedOnly
	}
	return false
}

// Metadata for request tracking and observability
type RequestMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId string                 `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"` // Unique identifier for request tracing
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                  // Request timestamp
	ClientId  string                 `protobuf:"bytes,3,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`    // Client identifier
	Version   string                 `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`                      // API version
	TraceId   *string                `protobuf:"bytes,5,opt,name=trace_id,json=traceId,proto3,oneof" json:"trace_id,omitempty"` // For distributed tracing
}

func (x *RequestMetadata) Reset() {
	*x = RequestMetadata{}
	mi := &file_comics_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestMetadata) ProtoMessage() {}

func (x *RequestMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_comics_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestMetadata.ProtoReflect.Descriptor instead.
func (*RequestMetadata) Descriptor() ([]byte, []int) {
	return file_comics_service_proto_rawDescGZIP(), []int{10}
}

func (x *RequestMetadata) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *RequestMetadata) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *RequestMetadata) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *RequestMetadata) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *RequestMetadata) GetTraceId() string {
	if x != nil && x.TraceId != nil {
		return *x.TraceId
	}
	return ""
}

type ResponseMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId     string                 `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`                                                                    // Matching request ID for tracing
	StartTime     *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                                                                    // Request start timestamp
	EndTime       *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                                                                          // Request end timestamp
	StatusCode    uint32                 `protobuf:"varint,4,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`                                                                // Response status code
	StatusMessage string                 `protobuf:"bytes,5,opt,name=status_message,json=statusMessage,proto3" json:"status_message,omitempty"`                                                        // Status message or error details
	Metrics       map[string]string      `protobuf:"bytes,6,rep,name=metrics,proto3" json:"metrics,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // Performance metrics
	TraceId       *string                `protobuf:"bytes,7,opt,name=trace_id,json=traceId,proto3,oneof" json:"trace_id,omitempty"`                                                                    // For distributed tracing
}

func (x *ResponseMetadata) Reset() {
	*x = ResponseMetadata{}
	mi := &file_comics_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResponseMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseMetadata) ProtoMessage() {}

func (x *ResponseMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_comics_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseMetadata.ProtoReflect.Descriptor instead.
func (*ResponseMetadata) Descriptor() ([]byte, []int) {
	return file_comics_service_proto_rawDescGZIP(), []int{11}
}

func (x *ResponseMetadata) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *ResponseMetadata) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *ResponseMetadata) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *ResponseMetadata) GetStatusCode() uint32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *ResponseMetadata) GetStatusMessage() string {
	if x != nil {
		return x.StatusMessage
	}
	return ""
}

func (x *ResponseMetadata) GetMetrics() map[string]string {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *ResponseMetadata) GetTraceId() string {
	if x != nil && x.TraceId != nil {
		return *x.TraceId
	}
	return ""
}

var File_comics_service_proto protoreflect.FileDescriptor

var file_comics_service_proto_rawDesc = []byte{
	0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x63, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x1a, 0x0c,
	0x63, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9e, 0x01, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x69, 0x63,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d,
	0x69, 0x63, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x28,
	0x0a, 0x05, 0x63, 0x6f, 0x6d, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x63, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x69, 0x63, 0x48, 0x00, 0x52, 0x05,
	0x63, 0x6f, 0x6d, 0x69, 0x63, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x6d, 0x69, 0x63, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xb7, 0x02, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x69,
	0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63,
	0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x25, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x69, 0x63, 0x52,
	0x06, 0x63, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x12, 0x24, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x0a,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a,
	0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x01, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x02, 0x52, 0x0b, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x70, 0x61, 0x67, 0x65, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x22, 0x5a, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x69, 0x63, 0x42, 0x79, 0x49,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d,
	0x69, 0x63, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0x6c, 0x0a,
	0x16, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x69, 0x63, 0x42, 0x79, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x69,
	0x63, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x59, 0x0a, 0x12, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x33, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0x7e, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6d, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x63, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x23, 0x0a, 0x05, 0x63, 0x6f, 0x6d, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x69, 0x63, 0x52,
	0x05, 0x63, 0x6f, 0x6d, 0x69, 0x63, 0x22, 0x6e, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6d, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x63, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x23, 0x0a, 0x05, 0x63, 0x6f, 0x6d, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x69, 0x63, 0x52,
	0x05, 0x63, 0x6f, 0x6d, 0x69, 0x63, 0x22, 0x4f, 0x0a, 0x11, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12,
	0x26, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x2a, 0x04, 0x18, 0x64, 0x20, 0x00, 0x52, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xc5, 0x02, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6d, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x63, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x39, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x0a,
	0x73, 0x6f, 0x72, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x69, 0x63, 0x53,
	0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x09, 0x73, 0x6f, 0x72, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01,
	0x52, 0x0b, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x88, 0x01, 0x01,
	0x12, 0x2a, 0x0a, 0x0e, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x6f, 0x6e,
	0x6c, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x0d, 0x75, 0x6e, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x65, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x42, 0x11, 0x0a, 0x0f,
	0x5f, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x22,
	0xe7, 0x02, 0x0a, 0x13, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x69, 0x63, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x69,
	0x63, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x05,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x39, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x0a, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d,
	0x69, 0x63, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x69, 0x63, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x48, 0x00, 0x52, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x88,
	0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x6f, 0x6e,
	0x6c, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x65, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x75, 0x6e,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x02, 0x52, 0x0d, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x4f,
	0x6e, 0x6c, 0x79, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65,
	0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x75, 0x6e, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x22, 0xce, 0x01, 0x0a, 0x0f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a,
	0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a,
	0x08, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x07, 0x74, 0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x22, 0xb5, 0x03, 0x0a, 0x10, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x39,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3f, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x69,
	0x63, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x1e, 0x0a, 0x08, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x1a, 0x3a, 0x0a, 0x0c, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x4a, 0x04, 0x08, 0x08, 0x10, 0x10, 0x52, 0x09, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f,
	0x68, 0x69, 0x74, 0x52, 0x0d, 0x64, 0x62, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x2a, 0x72, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x69, 0x63, 0x53, 0x6f, 0x72, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x49, 0x54, 0x4c, 0x45, 0x5f, 0x41,
	0x53, 0x43, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x49, 0x54, 0x4c, 0x45, 0x5f, 0x44, 0x45,
	0x53, 0x43, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x44, 0x5f,
	0x41, 0x53, 0x43, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x44,
	0x5f, 0x44, 0x45, 0x53, 0x43, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45, 0x4c, 0x45, 0x56,
	0x41, 0x4e, 0x43, 0x45, 0x10, 0x05, 0x32, 0xf4, 0x03, 0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x69, 0x63,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x42, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6d, 0x69, 0x63, 0x12, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x69,
	0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x0b, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x69, 0x63, 0x12, 0x1a, 0x2e, 0x63, 0x6f, 0x6d,
	0x69, 0x63, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x69, 0x63, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e,
	0x43, 0x6f, 0x6d, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x42, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x69, 0x63, 0x12, 0x1a,
	0x2e, 0x63, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6d, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x63, 0x6f, 0x6d,
	0x69, 0x63, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x69, 0x63, 0x42,
	0x79, 0x49, 0x64, 0x12, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6d, 0x69, 0x63, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x69, 0x63, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x0f, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6d, 0x69, 0x63, 0x42, 0x79, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1e, 0x2e, 0x63,
	0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x69, 0x63, 0x42, 0x79,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x63,
	0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x69,
	0x63, 0x73, 0x12, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6d, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x63,
	0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x0c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x43, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x12, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x43, 0x6f, 0x6d,
	0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x0c, 0x5a,
	0x07, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x62, 0x90, 0x01, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_comics_service_proto_rawDescOnce sync.Once
	file_comics_service_proto_rawDescData = file_comics_service_proto_rawDesc
)

func file_comics_service_proto_rawDescGZIP() []byte {
	file_comics_service_proto_rawDescOnce.Do(func() {
		file_comics_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_comics_service_proto_rawDescData)
	})
	return file_comics_service_proto_rawDescData
}

var file_comics_service_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_comics_service_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_comics_service_proto_goTypes = []any{
	(ComicSortOrder)(0),            // 0: comics.ComicSortOrder
	(*ComicResponse)(nil),          // 1: comics.ComicResponse
	(*ComicsResponse)(nil),         // 2: comics.ComicsResponse
	(*GetComicByIdRequest)(nil),    // 3: comics.GetComicByIdRequest
	(*GetComicByTitleRequest)(nil), // 4: comics.GetComicByTitleRequest
	(*DeleteComicRequest)(nil),     // 5: comics.DeleteComicRequest
	(*UpdateComicRequest)(nil),     // 6: comics.UpdateComicRequest
	(*CreateComicRequest)(nil),     // 7: comics.CreateComicRequest
	(*PaginationRequest)(nil),      // 8: comics.PaginationRequest
	(*GetComicsRequest)(nil),       // 9: comics.GetComicsRequest
	(*SearchComicsRequest)(nil),    // 10: comics.SearchComicsRequest
	(*RequestMetadata)(nil),        // 11: comics.RequestMetadata
	(*ResponseMetadata)(nil),       // 12: comics.ResponseMetadata
	nil,                            // 13: comics.ResponseMetadata.MetricsEntry
	(*Comic)(nil),                  // 14: comics.Comic
	(*timestamppb.Timestamp)(nil),  // 15: google.protobuf.Timestamp
}
var file_comics_service_proto_depIdxs = []int32{
	12, // 0: comics.ComicResponse.metadata:type_name -> comics.ResponseMetadata
	14, // 1: comics.ComicResponse.comic:type_name -> comics.Comic
	12, // 2: comics.ComicsResponse.metadata:type_name -> comics.ResponseMetadata
	14, // 3: comics.ComicsResponse.comics:type_name -> comics.Comic
	11, // 4: comics.GetComicByIdRequest.metadata:type_name -> comics.RequestMetadata
	11, // 5: comics.GetComicByTitleRequest.metadata:type_name -> comics.RequestMetadata
	11, // 6: comics.DeleteComicRequest.metadata:type_name -> comics.RequestMetadata
	11, // 7: comics.UpdateComicRequest.metadata:type_name -> comics.RequestMetadata
	14, // 8: comics.UpdateComicRequest.comic:type_name -> comics.Comic
	11, // 9: comics.CreateComicRequest.metadata:type_name -> comics.RequestMetadata
	14, // 10: comics.CreateComicRequest.comic:type_name -> comics.Comic
	11, // 11: comics.GetComicsRequest.metadata:type_name -> comics.RequestMetadata
	8,  // 12: comics.GetComicsRequest.pagination:type_name -> comics.PaginationRequest
	0,  // 13: comics.GetComicsRequest.sort_order:type_name -> comics.ComicSortOrder
	11, // 14: comics.SearchComicsRequest.metadata:type_name -> comics.RequestMetadata
	8,  // 15: comics.SearchComicsRequest.pagination:type_name -> comics.PaginationRequest
	0,  // 16: comics.SearchComicsRequest.sort_order:type_name -> comics.ComicSortOrder
	15, // 17: comics.RequestMetadata.timestamp:type_name -> google.protobuf.Timestamp
	15, // 18: comics.ResponseMetadata.start_time:type_name -> google.protobuf.Timestamp
	15, // 19: comics.ResponseMetadata.end_time:type_name -> google.protobuf.Timestamp
	13, // 20: comics.ResponseMetadata.metrics:type_name -> comics.ResponseMetadata.MetricsEntry
	7,  // 21: comics.ComicService.CreateComic:input_type -> comics.CreateComicRequest
	5,  // 22: comics.ComicService.DeleteComic:input_type -> comics.DeleteComicRequest
	6,  // 23: comics.ComicService.UpdateComic:input_type -> comics.UpdateComicRequest
	3,  // 24: comics.ComicService.GetComicById:input_type -> comics.GetComicByIdRequest
	4,  // 25: comics.ComicService.GetComicByTitle:input_type -> comics.GetComicByTitleRequest
	9,  // 26: comics.ComicService.GetComics:input_type -> comics.GetComicsRequest
	10, // 27: comics.ComicService.SearchComics:input_type -> comics.SearchComicsRequest
	1,  // 28: comics.ComicService.CreateComic:output_type -> comics.ComicResponse
	1,  // 29: comics.ComicService.DeleteComic:output_type -> comics.ComicResponse
	1,  // 30: comics.ComicService.UpdateComic:output_type -> comics.ComicResponse
	1,  // 31: comics.ComicService.GetComicById:output_type -> comics.ComicResponse
	1,  // 32: comics.ComicService.GetComicByTitle:output_type -> comics.ComicResponse
	2,  // 33: comics.ComicService.GetComics:output_type -> comics.ComicsResponse
	2,  // 34: comics.ComicService.SearchComics:output_type -> comics.ComicsResponse
	28, // [28:35] is the sub-list for method output_type
	21, // [21:28] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_comics_service_proto_init() }
func file_comics_service_proto_init() {
	if File_comics_service_proto != nil {
		return
	}
	file_comics_proto_init()
	file_comics_service_proto_msgTypes[0].OneofWrappers = []any{}
	file_comics_service_proto_msgTypes[1].OneofWrappers = []any{}
	file_comics_service_proto_msgTypes[8].OneofWrappers = []any{}
	file_comics_service_proto_msgTypes[9].OneofWrappers = []any{}
	file_comics_service_proto_msgTypes[10].OneofWrappers = []any{}
	file_comics_service_proto_msgTypes[11].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_comics_service_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_comics_service_proto_goTypes,
		DependencyIndexes: file_comics_service_proto_depIdxs,
		EnumInfos:         file_comics_service_proto_enumTypes,
		MessageInfos:      file_comics_service_proto_msgTypes,
	}.Build()
	File_comics_service_proto = out.File
	file_comics_service_proto_rawDesc = nil
	file_comics_service_proto_goTypes = nil
	file_comics_service_proto_depIdxs = nil
}
