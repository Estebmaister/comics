// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: comics_postgre.sql

package postgres

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createComic = `-- name: CreateComic :one
INSERT INTO comics (
  titles, author, description, cover, 
  com_type, status, published_in, genres, 
  current_chap, viewed_chap, last_update, track
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12
)
RETURNING id, titles, author, description, cover, published_in, genres, com_type, status, rating, current_chap, viewed_chap, track, deleted, last_update
`

type CreateComicParams struct {
	Titles      []string
	Author      pgtype.Text
	Description pgtype.Text
	Cover       pgtype.Text
	ComType     int32
	Status      int32
	PublishedIn []int32
	Genres      []int32
	CurrentChap int32
	ViewedChap  int32
	LastUpdate  pgtype.Date
	Track       bool
}

func (q *Queries) CreateComic(ctx context.Context, arg CreateComicParams) (Comic, error) {
	row := q.db.QueryRow(ctx, createComic,
		arg.Titles,
		arg.Author,
		arg.Description,
		arg.Cover,
		arg.ComType,
		arg.Status,
		arg.PublishedIn,
		arg.Genres,
		arg.CurrentChap,
		arg.ViewedChap,
		arg.LastUpdate,
		arg.Track,
	)
	var i Comic
	err := row.Scan(
		&i.ID,
		&i.Titles,
		&i.Author,
		&i.Description,
		&i.Cover,
		&i.PublishedIn,
		&i.Genres,
		&i.ComType,
		&i.Status,
		&i.Rating,
		&i.CurrentChap,
		&i.ViewedChap,
		&i.Track,
		&i.Deleted,
		&i.LastUpdate,
	)
	return i, err
}

const deleteComicById = `-- name: DeleteComicById :exec
DELETE FROM comics
WHERE id = $1
`

func (q *Queries) DeleteComicById(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteComicById, id)
	return err
}

const getComicById = `-- name: GetComicById :one
SELECT id, titles, author, description, cover, published_in, genres, com_type, status, rating, current_chap, viewed_chap, track, deleted, last_update FROM comics
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetComicById(ctx context.Context, id int32) (Comic, error) {
	row := q.db.QueryRow(ctx, getComicById, id)
	var i Comic
	err := row.Scan(
		&i.ID,
		&i.Titles,
		&i.Author,
		&i.Description,
		&i.Cover,
		&i.PublishedIn,
		&i.Genres,
		&i.ComType,
		&i.Status,
		&i.Rating,
		&i.CurrentChap,
		&i.ViewedChap,
		&i.Track,
		&i.Deleted,
		&i.LastUpdate,
	)
	return i, err
}

const getComics = `-- name: GetComics :many
SELECT id, titles, author, description, cover, published_in, genres, com_type, status, rating, current_chap, viewed_chap, track, deleted, last_update FROM comics
ORDER BY last_update DESC
LIMIT $1 OFFSET $2
`

type GetComicsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetComics(ctx context.Context, arg GetComicsParams) ([]Comic, error) {
	rows, err := q.db.Query(ctx, getComics, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Comic
	for rows.Next() {
		var i Comic
		if err := rows.Scan(
			&i.ID,
			&i.Titles,
			&i.Author,
			&i.Description,
			&i.Cover,
			&i.PublishedIn,
			&i.Genres,
			&i.ComType,
			&i.Status,
			&i.Rating,
			&i.CurrentChap,
			&i.ViewedChap,
			&i.Track,
			&i.Deleted,
			&i.LastUpdate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getComicsByTitle = `-- name: GetComicsByTitle :many
SELECT id, titles, author, description, cover, published_in, genres, com_type, status, rating, current_chap, viewed_chap, track, deleted, last_update FROM comics
WHERE EXISTS (
    SELECT 1
    FROM unnest(titles) AS title
    WHERE title LIKE '%' || $1 || '%'
)
ORDER BY last_update DESC
LIMIT $2 OFFSET $3
`

type GetComicsByTitleParams struct {
	Column1 pgtype.Text
	Limit   int32
	Offset  int32
}

func (q *Queries) GetComicsByTitle(ctx context.Context, arg GetComicsByTitleParams) ([]Comic, error) {
	rows, err := q.db.Query(ctx, getComicsByTitle, arg.Column1, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Comic
	for rows.Next() {
		var i Comic
		if err := rows.Scan(
			&i.ID,
			&i.Titles,
			&i.Author,
			&i.Description,
			&i.Cover,
			&i.PublishedIn,
			&i.Genres,
			&i.ComType,
			&i.Status,
			&i.Rating,
			&i.CurrentChap,
			&i.ViewedChap,
			&i.Track,
			&i.Deleted,
			&i.LastUpdate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const softDeleteComicById = `-- name: SoftDeleteComicById :exec
UPDATE comics
SET deleted = true
WHERE id = $1
`

func (q *Queries) SoftDeleteComicById(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, softDeleteComicById, id)
	return err
}

const updateComicById = `-- name: UpdateComicById :exec
UPDATE comics
  set titles = $2,
  author = $3,
  description = $4,
  cover = $5,
  com_type = $6,
  status = $7,
  published_in = $8,
  genres = $9,
  current_chap = $10,
  viewed_chap = $11,
  last_update = $12,
  track = $13,
  deleted = $14
WHERE id = $1
`

type UpdateComicByIdParams struct {
	ID          int32
	Titles      []string
	Author      pgtype.Text
	Description pgtype.Text
	Cover       pgtype.Text
	ComType     int32
	Status      int32
	PublishedIn []int32
	Genres      []int32
	CurrentChap int32
	ViewedChap  int32
	LastUpdate  pgtype.Date
	Track       bool
	Deleted     bool
}

func (q *Queries) UpdateComicById(ctx context.Context, arg UpdateComicByIdParams) error {
	_, err := q.db.Exec(ctx, updateComicById,
		arg.ID,
		arg.Titles,
		arg.Author,
		arg.Description,
		arg.Cover,
		arg.ComType,
		arg.Status,
		arg.PublishedIn,
		arg.Genres,
		arg.CurrentChap,
		arg.ViewedChap,
		arg.LastUpdate,
		arg.Track,
		arg.Deleted,
	)
	return err
}
