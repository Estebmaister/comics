// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: comics_sqlite.sql

package sqlite

import (
	"context"
	"database/sql"
	"time"
)

const createComic = `-- name: CreateComic :one
INSERT INTO comics (
  titles, author, description, cover, 
  com_type, status, published_in, genres, 
  current_chap, viewed_chap, last_update, track
) VALUES (
  ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?
)
RETURNING id, titles, author, description, cover, published_in, genres, com_type, status, rating, current_chap, viewed_chap, track, deleted, last_update
`

type CreateComicParams struct {
	Titles      string
	Author      sql.NullString
	Description sql.NullString
	Cover       sql.NullString
	ComType     int64
	Status      int64
	PublishedIn string
	Genres      string
	CurrentChap int64
	ViewedChap  int64
	LastUpdate  time.Time
	Track       bool
}

func (q *Queries) CreateComic(ctx context.Context, arg CreateComicParams) (Comic, error) {
	row := q.db.QueryRowContext(ctx, createComic,
		arg.Titles,
		arg.Author,
		arg.Description,
		arg.Cover,
		arg.ComType,
		arg.Status,
		arg.PublishedIn,
		arg.Genres,
		arg.CurrentChap,
		arg.ViewedChap,
		arg.LastUpdate,
		arg.Track,
	)
	var i Comic
	err := row.Scan(
		&i.ID,
		&i.Titles,
		&i.Author,
		&i.Description,
		&i.Cover,
		&i.PublishedIn,
		&i.Genres,
		&i.ComType,
		&i.Status,
		&i.Rating,
		&i.CurrentChap,
		&i.ViewedChap,
		&i.Track,
		&i.Deleted,
		&i.LastUpdate,
	)
	return i, err
}

const deleteComicByID = `-- name: DeleteComicByID :exec
DELETE FROM comics
WHERE id = ?
`

func (q *Queries) DeleteComicByID(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteComicByID, id)
	return err
}

const getComicByID = `-- name: GetComicByID :one
SELECT id, titles, author, description, cover, published_in, genres, com_type, status, rating, current_chap, viewed_chap, track, deleted, last_update FROM comics
WHERE id = ? LIMIT 1
`

func (q *Queries) GetComicByID(ctx context.Context, id int64) (Comic, error) {
	row := q.db.QueryRowContext(ctx, getComicByID, id)
	var i Comic
	err := row.Scan(
		&i.ID,
		&i.Titles,
		&i.Author,
		&i.Description,
		&i.Cover,
		&i.PublishedIn,
		&i.Genres,
		&i.ComType,
		&i.Status,
		&i.Rating,
		&i.CurrentChap,
		&i.ViewedChap,
		&i.Track,
		&i.Deleted,
		&i.LastUpdate,
	)
	return i, err
}

const getComics = `-- name: GetComics :many
SELECT id, titles, author, description, cover, published_in, genres, com_type, status, rating, current_chap, viewed_chap, track, deleted, last_update FROM comics
ORDER BY last_update DESC
LIMIT ? OFFSET ?
`

type GetComicsParams struct {
	Limit  int64
	Offset int64
}

func (q *Queries) GetComics(ctx context.Context, arg GetComicsParams) ([]Comic, error) {
	rows, err := q.db.QueryContext(ctx, getComics, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Comic
	for rows.Next() {
		var i Comic
		if err := rows.Scan(
			&i.ID,
			&i.Titles,
			&i.Author,
			&i.Description,
			&i.Cover,
			&i.PublishedIn,
			&i.Genres,
			&i.ComType,
			&i.Status,
			&i.Rating,
			&i.CurrentChap,
			&i.ViewedChap,
			&i.Track,
			&i.Deleted,
			&i.LastUpdate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getComicsByTitle = `-- name: GetComicsByTitle :many
SELECT id, titles, author, description, cover, published_in, genres, com_type, status, rating, current_chap, viewed_chap, track, deleted, last_update FROM comics
WHERE titles LIKE '%' || ? || '%'
ORDER BY last_update DESC
LIMIT ? OFFSET ?
`

type GetComicsByTitleParams struct {
	Column1 sql.NullString
	Limit   int64
	Offset  int64
}

func (q *Queries) GetComicsByTitle(ctx context.Context, arg GetComicsByTitleParams) ([]Comic, error) {
	rows, err := q.db.QueryContext(ctx, getComicsByTitle, arg.Column1, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Comic
	for rows.Next() {
		var i Comic
		if err := rows.Scan(
			&i.ID,
			&i.Titles,
			&i.Author,
			&i.Description,
			&i.Cover,
			&i.PublishedIn,
			&i.Genres,
			&i.ComType,
			&i.Status,
			&i.Rating,
			&i.CurrentChap,
			&i.ViewedChap,
			&i.Track,
			&i.Deleted,
			&i.LastUpdate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const softDeleteComicByID = `-- name: SoftDeleteComicByID :exec
UPDATE comics
SET deleted = true, updated_at = CURRENT_TIMESTAMP
WHERE id = ?
`

func (q *Queries) SoftDeleteComicByID(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, softDeleteComicByID, id)
	return err
}

const updateComicByID = `-- name: UpdateComicByID :exec
UPDATE comics
  set titles = ?,
  author = ?,
  description = ?,
  cover = ?,
  com_type = ?,
  status = ?,
  rating = ?,
  published_in = ?,
  genres = ?,
  current_chap = ?,
  viewed_chap = ?,
  last_update = ?,
  track = ?,
  deleted = ?
WHERE id = ?
`

type UpdateComicByIDParams struct {
	Titles      string
	Author      sql.NullString
	Description sql.NullString
	Cover       sql.NullString
	ComType     int64
	Status      int64
	Rating      int64
	PublishedIn string
	Genres      string
	CurrentChap int64
	ViewedChap  int64
	LastUpdate  time.Time
	Track       bool
	Deleted     bool
	ID          int64
}

func (q *Queries) UpdateComicByID(ctx context.Context, arg UpdateComicByIDParams) error {
	_, err := q.db.ExecContext(ctx, updateComicByID,
		arg.Titles,
		arg.Author,
		arg.Description,
		arg.Cover,
		arg.ComType,
		arg.Status,
		arg.Rating,
		arg.PublishedIn,
		arg.Genres,
		arg.CurrentChap,
		arg.ViewedChap,
		arg.LastUpdate,
		arg.Track,
		arg.Deleted,
		arg.ID,
	)
	return err
}
