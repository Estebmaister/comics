// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: comics_service.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ComicResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ComicResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ComicResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ComicResponseMultiError, or
// nil if none found.
func (m *ComicResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ComicResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ComicResponseValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ComicResponseValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ComicResponseValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.Comic != nil {

		if all {
			switch v := interface{}(m.GetComic()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ComicResponseValidationError{
						field:  "Comic",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ComicResponseValidationError{
						field:  "Comic",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetComic()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ComicResponseValidationError{
					field:  "Comic",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Error != nil {
		// no validation rules for Error
	}

	if len(errors) > 0 {
		return ComicResponseMultiError(errors)
	}

	return nil
}

// ComicResponseMultiError is an error wrapping multiple validation errors
// returned by ComicResponse.ValidateAll() if the designated constraints
// aren't met.
type ComicResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ComicResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ComicResponseMultiError) AllErrors() []error { return m }

// ComicResponseValidationError is the validation error returned by
// ComicResponse.Validate if the designated constraints aren't met.
type ComicResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ComicResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ComicResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ComicResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ComicResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ComicResponseValidationError) ErrorName() string { return "ComicResponseValidationError" }

// Error satisfies the builtin error interface
func (e ComicResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sComicResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ComicResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ComicResponseValidationError{}

// Validate checks the field values on ComicsResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ComicsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ComicsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ComicsResponseMultiError,
// or nil if none found.
func (m *ComicsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ComicsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ComicsResponseValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ComicsResponseValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ComicsResponseValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetComics() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ComicsResponseValidationError{
						field:  fmt.Sprintf("Comics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ComicsResponseValidationError{
						field:  fmt.Sprintf("Comics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ComicsResponseValidationError{
					field:  fmt.Sprintf("Comics[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.TotalCount != nil {
		// no validation rules for TotalCount
	}

	if m.TotalPages != nil {
		// no validation rules for TotalPages
	}

	if m.CurrentPage != nil {
		// no validation rules for CurrentPage
	}

	if m.Error != nil {
		// no validation rules for Error
	}

	if len(errors) > 0 {
		return ComicsResponseMultiError(errors)
	}

	return nil
}

// ComicsResponseMultiError is an error wrapping multiple validation errors
// returned by ComicsResponse.ValidateAll() if the designated constraints
// aren't met.
type ComicsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ComicsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ComicsResponseMultiError) AllErrors() []error { return m }

// ComicsResponseValidationError is the validation error returned by
// ComicsResponse.Validate if the designated constraints aren't met.
type ComicsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ComicsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ComicsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ComicsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ComicsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ComicsResponseValidationError) ErrorName() string { return "ComicsResponseValidationError" }

// Error satisfies the builtin error interface
func (e ComicsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sComicsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ComicsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ComicsResponseValidationError{}

// Validate checks the field values on GetComicByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetComicByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetComicByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetComicByIdRequestMultiError, or nil if none found.
func (m *GetComicByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetComicByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetComicByIdRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetComicByIdRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetComicByIdRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetId() <= 0 {
		err := GetComicByIdRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetComicByIdRequestMultiError(errors)
	}

	return nil
}

// GetComicByIdRequestMultiError is an error wrapping multiple validation
// errors returned by GetComicByIdRequest.ValidateAll() if the designated
// constraints aren't met.
type GetComicByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetComicByIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetComicByIdRequestMultiError) AllErrors() []error { return m }

// GetComicByIdRequestValidationError is the validation error returned by
// GetComicByIdRequest.Validate if the designated constraints aren't met.
type GetComicByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetComicByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetComicByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetComicByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetComicByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetComicByIdRequestValidationError) ErrorName() string {
	return "GetComicByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetComicByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetComicByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetComicByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetComicByIdRequestValidationError{}

// Validate checks the field values on GetComicByTitleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetComicByTitleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetComicByTitleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetComicByTitleRequestMultiError, or nil if none found.
func (m *GetComicByTitleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetComicByTitleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetComicByTitleRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetComicByTitleRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetComicByTitleRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetTitle()) < 1 {
		err := GetComicByTitleRequestValidationError{
			field:  "Title",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetComicByTitleRequestMultiError(errors)
	}

	return nil
}

// GetComicByTitleRequestMultiError is an error wrapping multiple validation
// errors returned by GetComicByTitleRequest.ValidateAll() if the designated
// constraints aren't met.
type GetComicByTitleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetComicByTitleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetComicByTitleRequestMultiError) AllErrors() []error { return m }

// GetComicByTitleRequestValidationError is the validation error returned by
// GetComicByTitleRequest.Validate if the designated constraints aren't met.
type GetComicByTitleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetComicByTitleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetComicByTitleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetComicByTitleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetComicByTitleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetComicByTitleRequestValidationError) ErrorName() string {
	return "GetComicByTitleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetComicByTitleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetComicByTitleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetComicByTitleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetComicByTitleRequestValidationError{}

// Validate checks the field values on DeleteComicRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteComicRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteComicRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteComicRequestMultiError, or nil if none found.
func (m *DeleteComicRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteComicRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteComicRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteComicRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteComicRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetId() <= 0 {
		err := DeleteComicRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteComicRequestMultiError(errors)
	}

	return nil
}

// DeleteComicRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteComicRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteComicRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteComicRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteComicRequestMultiError) AllErrors() []error { return m }

// DeleteComicRequestValidationError is the validation error returned by
// DeleteComicRequest.Validate if the designated constraints aren't met.
type DeleteComicRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteComicRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteComicRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteComicRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteComicRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteComicRequestValidationError) ErrorName() string {
	return "DeleteComicRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteComicRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteComicRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteComicRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteComicRequestValidationError{}

// Validate checks the field values on UpdateComicRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateComicRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateComicRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateComicRequestMultiError, or nil if none found.
func (m *UpdateComicRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateComicRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateComicRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateComicRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateComicRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetId() <= 0 {
		err := UpdateComicRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetComic()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateComicRequestValidationError{
					field:  "Comic",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateComicRequestValidationError{
					field:  "Comic",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetComic()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateComicRequestValidationError{
				field:  "Comic",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateComicRequestMultiError(errors)
	}

	return nil
}

// UpdateComicRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateComicRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateComicRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateComicRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateComicRequestMultiError) AllErrors() []error { return m }

// UpdateComicRequestValidationError is the validation error returned by
// UpdateComicRequest.Validate if the designated constraints aren't met.
type UpdateComicRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateComicRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateComicRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateComicRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateComicRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateComicRequestValidationError) ErrorName() string {
	return "UpdateComicRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateComicRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateComicRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateComicRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateComicRequestValidationError{}

// Validate checks the field values on CreateComicRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateComicRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateComicRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateComicRequestMultiError, or nil if none found.
func (m *CreateComicRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateComicRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateComicRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateComicRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateComicRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetComic()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateComicRequestValidationError{
					field:  "Comic",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateComicRequestValidationError{
					field:  "Comic",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetComic()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateComicRequestValidationError{
				field:  "Comic",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateComicRequestMultiError(errors)
	}

	return nil
}

// CreateComicRequestMultiError is an error wrapping multiple validation errors
// returned by CreateComicRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateComicRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateComicRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateComicRequestMultiError) AllErrors() []error { return m }

// CreateComicRequestValidationError is the validation error returned by
// CreateComicRequest.Validate if the designated constraints aren't met.
type CreateComicRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateComicRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateComicRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateComicRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateComicRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateComicRequestValidationError) ErrorName() string {
	return "CreateComicRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateComicRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateComicRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateComicRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateComicRequestValidationError{}

// Validate checks the field values on PaginationRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PaginationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PaginationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PaginationRequestMultiError, or nil if none found.
func (m *PaginationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PaginationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() <= 0 {
		err := PaginationRequestValidationError{
			field:  "Page",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val <= 0 || val > 100 {
		err := PaginationRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range (0, 100]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PaginationRequestMultiError(errors)
	}

	return nil
}

// PaginationRequestMultiError is an error wrapping multiple validation errors
// returned by PaginationRequest.ValidateAll() if the designated constraints
// aren't met.
type PaginationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PaginationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PaginationRequestMultiError) AllErrors() []error { return m }

// PaginationRequestValidationError is the validation error returned by
// PaginationRequest.Validate if the designated constraints aren't met.
type PaginationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaginationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaginationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaginationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaginationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaginationRequestValidationError) ErrorName() string {
	return "PaginationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PaginationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPaginationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaginationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaginationRequestValidationError{}

// Validate checks the field values on GetComicsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetComicsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetComicsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetComicsRequestMultiError, or nil if none found.
func (m *GetComicsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetComicsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetComicsRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetComicsRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetComicsRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetComicsRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetComicsRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetComicsRequestValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.SortOrder != nil {
		// no validation rules for SortOrder
	}

	if m.TrackedOnly != nil {
		// no validation rules for TrackedOnly
	}

	if m.UncheckedOnly != nil {
		// no validation rules for UncheckedOnly
	}

	if len(errors) > 0 {
		return GetComicsRequestMultiError(errors)
	}

	return nil
}

// GetComicsRequestMultiError is an error wrapping multiple validation errors
// returned by GetComicsRequest.ValidateAll() if the designated constraints
// aren't met.
type GetComicsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetComicsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetComicsRequestMultiError) AllErrors() []error { return m }

// GetComicsRequestValidationError is the validation error returned by
// GetComicsRequest.Validate if the designated constraints aren't met.
type GetComicsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetComicsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetComicsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetComicsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetComicsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetComicsRequestValidationError) ErrorName() string { return "GetComicsRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetComicsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetComicsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetComicsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetComicsRequestValidationError{}

// Validate checks the field values on SearchComicsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchComicsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchComicsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchComicsRequestMultiError, or nil if none found.
func (m *SearchComicsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchComicsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SearchComicsRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SearchComicsRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SearchComicsRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetQuery()) < 2 {
		err := SearchComicsRequestValidationError{
			field:  "Query",
			reason: "value length must be at least 2 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SearchComicsRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SearchComicsRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SearchComicsRequestValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.SortOrder != nil {
		// no validation rules for SortOrder
	}

	if m.TrackedOnly != nil {
		// no validation rules for TrackedOnly
	}

	if m.UncheckedOnly != nil {
		// no validation rules for UncheckedOnly
	}

	if len(errors) > 0 {
		return SearchComicsRequestMultiError(errors)
	}

	return nil
}

// SearchComicsRequestMultiError is an error wrapping multiple validation
// errors returned by SearchComicsRequest.ValidateAll() if the designated
// constraints aren't met.
type SearchComicsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchComicsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchComicsRequestMultiError) AllErrors() []error { return m }

// SearchComicsRequestValidationError is the validation error returned by
// SearchComicsRequest.Validate if the designated constraints aren't met.
type SearchComicsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchComicsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchComicsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchComicsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchComicsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchComicsRequestValidationError) ErrorName() string {
	return "SearchComicsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SearchComicsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchComicsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchComicsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchComicsRequestValidationError{}

// Validate checks the field values on RequestMetadata with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RequestMetadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RequestMetadata with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RequestMetadataMultiError, or nil if none found.
func (m *RequestMetadata) ValidateAll() error {
	return m.validate(true)
}

func (m *RequestMetadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RequestId

	if all {
		switch v := interface{}(m.GetTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RequestMetadataValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RequestMetadataValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RequestMetadataValidationError{
				field:  "Timestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ClientId

	// no validation rules for Version

	if m.TraceId != nil {
		// no validation rules for TraceId
	}

	if len(errors) > 0 {
		return RequestMetadataMultiError(errors)
	}

	return nil
}

// RequestMetadataMultiError is an error wrapping multiple validation errors
// returned by RequestMetadata.ValidateAll() if the designated constraints
// aren't met.
type RequestMetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RequestMetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RequestMetadataMultiError) AllErrors() []error { return m }

// RequestMetadataValidationError is the validation error returned by
// RequestMetadata.Validate if the designated constraints aren't met.
type RequestMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestMetadataValidationError) ErrorName() string { return "RequestMetadataValidationError" }

// Error satisfies the builtin error interface
func (e RequestMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequestMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestMetadataValidationError{}

// Validate checks the field values on ResponseMetadata with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ResponseMetadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResponseMetadata with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResponseMetadataMultiError, or nil if none found.
func (m *ResponseMetadata) ValidateAll() error {
	return m.validate(true)
}

func (m *ResponseMetadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RequestId

	if all {
		switch v := interface{}(m.GetStartTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ResponseMetadataValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ResponseMetadataValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResponseMetadataValidationError{
				field:  "StartTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEndTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ResponseMetadataValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ResponseMetadataValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResponseMetadataValidationError{
				field:  "EndTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for StatusCode

	// no validation rules for StatusMessage

	// no validation rules for Metrics

	if m.TraceId != nil {
		// no validation rules for TraceId
	}

	if len(errors) > 0 {
		return ResponseMetadataMultiError(errors)
	}

	return nil
}

// ResponseMetadataMultiError is an error wrapping multiple validation errors
// returned by ResponseMetadata.ValidateAll() if the designated constraints
// aren't met.
type ResponseMetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResponseMetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResponseMetadataMultiError) AllErrors() []error { return m }

// ResponseMetadataValidationError is the validation error returned by
// ResponseMetadata.Validate if the designated constraints aren't met.
type ResponseMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResponseMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResponseMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResponseMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResponseMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResponseMetadataValidationError) ErrorName() string { return "ResponseMetadataValidationError" }

// Error satisfies the builtin error interface
func (e ResponseMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResponseMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResponseMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResponseMetadataValidationError{}
