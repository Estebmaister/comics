basePath: /
definitions:
  domain.LoginRequest:
    properties:
      email:
        description: binding:"required,email" is a stronger validator for the field
        example: test@example.com
        type: string
      password:
        example: password123
        type: string
    required:
    - email
    - password
    type: object
  domain.User:
    properties:
      email:
        type: string
      id:
        type: string
      password:
        type: string
      role:
        type: string
      username:
        type: string
    type: object
host: localhost:8081
info:
  contact:
    email: estebmaister@gmail.com
    name: Estebmaister
    url: http://www.github.com/estebmaister
  description: Server documentation to query comics from the DB.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Comics API
  version: "1.1"
paths:
  /admin/dashboard:
    get:
      consumes:
      - application/json
      description: Function for getting the admin dashboard
      operationId: dashboard
      parameters:
      - description: Bearer <JWT Token>
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: not registered
          schema:
            type: integer
        "404":
          description: not registered
          schema:
            type: string
      summary: Dashboard
      tags:
      - Dashboard
  /login:
    post:
      consumes:
      - application/json
      description: Login a user with basic credentials to receive an auth 'token'
        in the headers if successful
      operationId: user-login
      parameters:
      - description: Bearer <JWT Token>
        in: header
        name: Authorization
        type: string
      - description: Login user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/domain.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: no ok
          schema:
            type: string
      summary: Login existent user
      tags:
      - Authentication
  /protected/profile:
    get:
      consumes:
      - application/json
      description: Function for getting the user profile
      operationId: profile
      parameters:
      - description: Bearer <JWT Token>
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: not registered
          schema:
            type: integer
        "404":
          description: not registered
          schema:
            type: string
      summary: Profile
      tags:
      - Profile
  /refresh-token:
    post:
      consumes:
      - application/json
      description: Function for refreshing the access token
      operationId: refresh-token
      parameters:
      - description: Bearer <JWT Token>
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: not registered
          schema:
            type: integer
        "404":
          description: not registered
          schema:
            type: string
      summary: RefreshToken
      tags:
      - Authentication
  /signup:
    post:
      consumes:
      - application/json
      description: Function for SigningUp a new user (for demonstration purposes),
        receive a confirmation for success or failure
      operationId: user-signup
      parameters:
      - default: testuser
        description: Username
        in: query
        name: username
        type: string
      - description: Login user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/domain.User'
      produces:
      - application/json
      responses:
        "201":
          description: registered
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: not registered
          schema:
            type: integer
        "404":
          description: not registered
          schema:
            type: string
      summary: SignUp new user
      tags:
      - Authentication
swagger: "2.0"
