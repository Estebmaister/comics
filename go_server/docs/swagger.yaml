definitions:
  domain.AuthData:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
      user_id:
        type: string
    type: object
  domain.AuthResponse:
    properties:
      data:
        $ref: '#/definitions/domain.AuthData'
      message:
        type: string
      status:
        type: integer
    type: object
  domain.LoginRequest:
    properties:
      email:
        example: test@example.com
        type: string
      password:
        example: password123
        type: string
    required:
    - email
    - password
    type: object
  domain.NoDataResponse:
    properties:
      data:
        type: boolean
      message:
        type: string
      status:
        type: integer
    type: object
  domain.SignUpRequest:
    properties:
      email:
        example: test@example.com
        type: string
      password:
        example: password123
        type: string
      username:
        example: testuser
        type: string
    required:
    - email
    - password
    - username
    type: object
info:
  contact:
    email: estebmaister@gmail.com
    name: Estebmaister
    url: http://www.github.com/estebmaister
  description: Server documentation to query comics from the DB.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Comics API
  version: "1.1"
paths:
  /admin/dashboard:
    get:
      consumes:
      - application/json
      description: Returns the admin dashboard, needs admin auth
      operationId: dashboard
      parameters:
      - default: Bearer XXX
        description: Bearer JWT
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Not registered
          schema:
            type: string
        "404":
          description: Not implemented
          schema:
            type: string
      security:
      - Bearer JWT: []
      summary: Dashboard
      tags:
      - Dashboard
  /login:
    post:
      consumes:
      - application/json
      description: |-
        Login a user with basic credentials to receive an auth 'token'
        in the headers if successful
      operationId: user-login
      parameters:
      - default: Bearer XXX
        description: Bearer JWT
        in: header
        name: Authorization
        type: string
      - description: Login user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/domain.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: logged in
          headers:
            Authorization:
              description: Bearer JWT
              type: string
          schema:
            $ref: '#/definitions/domain.AuthResponse'
        "400":
          description: no ok
          schema:
            type: string
      security:
      - Bearer JWT: []
      summary: Login existent user
      tags:
      - Authentication
  /protected/profile:
    get:
      consumes:
      - application/json
      description: Function for getting the user profile
      operationId: profile
      parameters:
      - default: Bearer XXX
        description: Bearer JWT
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: not registered
          schema:
            type: integer
        "404":
          description: not registered
          schema:
            type: string
      security:
      - Bearer JWT: []
      summary: Profile
      tags:
      - Profile
  /refresh-token:
    post:
      consumes:
      - application/json
      description: Function for refreshing the access token
      operationId: refresh-token
      parameters:
      - default: Bearer refresh_token
        description: Bearer JWT
        in: header
        name: Authorization
        required: true
        type: string
      - description: role
        enum:
        - user
        - admin
        in: header
        name: Role
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: new access token generated
          headers:
            Authorization:
              description: Bearer JWT
              type: string
          schema:
            $ref: '#/definitions/domain.AuthResponse'
        "400":
          description: not registered
          schema:
            type: integer
        "404":
          description: not registered
          schema:
            type: string
      summary: RefreshToken
      tags:
      - Authentication
  /signup:
    post:
      consumes:
      - application/json
      description: |-
        Signs Up a new user (for demonstration purposes),
        receive a confirmation for success or failure
      operationId: user-signup
      parameters:
      - description: Login user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/domain.SignUpRequest'
      produces:
      - application/json
      responses:
        "201":
          description: registered
          schema:
            $ref: '#/definitions/domain.AuthResponse'
        "400":
          description: not registered, invalid data
          schema:
            $ref: '#/definitions/domain.NoDataResponse'
        "409":
          description: username or email already in use
          schema:
            $ref: '#/definitions/domain.NoDataResponse'
      summary: SignUp new user
      tags:
      - Authentication
securityDefinitions:
  Bearer JWT:
    description: Type "Bearer" followed by a space paste the JWT.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
