{
    "swagger": "2.0",
    "info": {
        "description": "Server documentation to query comics from the DB.",
        "title": "Comics API",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "Estebmaister",
            "url": "http://www.github.com/estebmaister",
            "email": "estebmaister@gmail.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.1"
    },
    "host": "localhost:8081",
    "basePath": "/",
    "paths": {
        "/admin/dashboard": {
            "get": {
                "description": "Function for getting the admin dashboard",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Dashboard"
                ],
                "summary": "Dashboard",
                "operationId": "dashboard",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer \u003cJWT Token\u003e",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "not registered",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "404": {
                        "description": "not registered",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/login": {
            "post": {
                "description": "Login a user with basic credentials to receive an auth 'token' in the headers if successful",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Login existent user",
                "operationId": "user-login",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer \u003cJWT Token\u003e",
                        "name": "Authorization",
                        "in": "header"
                    },
                    {
                        "description": "Login user",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/domain.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "no ok",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/protected/profile": {
            "get": {
                "description": "Function for getting the user profile",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Profile"
                ],
                "summary": "Profile",
                "operationId": "profile",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer \u003cJWT Token\u003e",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "not registered",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "404": {
                        "description": "not registered",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/refresh-token": {
            "post": {
                "description": "Function for refreshing the access token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "RefreshToken",
                "operationId": "refresh-token",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer \u003cJWT Token\u003e",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "not registered",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "404": {
                        "description": "not registered",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/signup": {
            "post": {
                "description": "Function for SigningUp a new user (for demonstration purposes), receive a confirmation for success or failure",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "SignUp new user",
                "operationId": "user-signup",
                "parameters": [
                    {
                        "type": "string",
                        "default": "testuser",
                        "description": "Username",
                        "name": "username",
                        "in": "query"
                    },
                    {
                        "description": "Login user",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/domain.User"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "registered",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "not registered",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "404": {
                        "description": "not registered",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "domain.LoginRequest": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "description": "binding:\"required,email\" is a stronger validator for the field",
                    "type": "string",
                    "example": "test@example.com"
                },
                "password": {
                    "type": "string",
                    "example": "password123"
                }
            }
        },
        "domain.User": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        }
    }
}