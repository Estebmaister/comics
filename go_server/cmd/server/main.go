package main

import (
	"time"

	"comics/api/controller"
	"comics/api/middleware"
	"comics/api/route"
	"comics/bootstrap"
	_ "comics/docs" // docs is generated by Swag CLI, you have to import it.
	repo "comics/repository"

	"github.com/gin-gonic/gin"
	swaggerFiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger"
	"go.mongodb.org/mongo-driver/mongo"
)

type Application struct {
	Env   *Env
	Mongo mongo.Client
}

type Env struct {
	AppEnv         string `mapstructure:"APP_ENV"`
	ServerAddress  string `mapstructure:"SERVER_ADDRESS"`
	ContextTimeout int    `mapstructure:"CONTEXT_TIMEOUT"`
	DBHost         string `mapstructure:"DB_HOST"`
	DBPort         string `mapstructure:"DB_PORT"`
}

func main() {

	// app is the instance of the entire application, managing key resources throughout its lifecycle
	app := bootstrap.App()

	// Configuration variables
	env := app.Env

	// Database instance
	db := app.Mongo.Database(env.DBName)
	defer app.CloseDBConnection()

	timeout := time.Duration(env.ContextTimeout) * time.Second

	// Creating a gin instance
	gin := gin.Default()

	// Route binding
	route.Setup(env, timeout, db, gin)

	// Running the server
	gin.Run(env.ServerAddress)

	// Initialize the database
	_, err := repo.NewSQLiteDB("comics.db")
	if err != nil {
		panic("Failed to initialize database")
	}

	// Run the server
	userServer()
}

//	@title			Comics API
//	@version		1.0
//	@description	Server documentation to query comics from the DB.
//	@termsOfService	http://swagger.io/terms/

//	@contact.name	Estebmaister
//	@contact.url	http://www.github.com/estebmaister
//	@contact.email	estebmaister@gmail.com

//	@license.name	Apache 2.0
//	@license.url	http://www.apache.org/licenses/LICENSE-2.0.html

// @host		localhost:8080
// @BasePath	/
func userServer() {
	r := gin.Default()

	url := ginSwagger.URL("http://localhost:8080/swagger/doc.json")
	print("http://localhost:8080/swagger/index.html\n")
	r.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler, url))

	// Public routes (w/o authentication)
	publicRoutes := r.Group("/public")
	{
		publicRoutes.POST("/login", controller.Login)
		publicRoutes.POST("/register", controller.Register)
	}

	// Protected routes (w/ authentication)
	protectedRoutes := r.Group("/protected")
	protectedRoutes.Use(middleware.AuthenticationMiddleware())
	{
		// Protected routes here
	}

	r.Run(":8080")
}
